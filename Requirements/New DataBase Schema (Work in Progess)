#1. Users Table
- **UserID** (Primary Key): Unique identifier for each user.
- **Username**: User's chosen name.
- **Password**: Encrypted password for user login.
- **FirstName**: User's first name.
- **LastName**: User's last name.
- **Email**: User's email address.
- **Role**: Distinguishes between students, instructors, and administrators.

#2. Courses Table
- **CourseID** (Primary Key): Unique identifier for each course.
- **CourseName**: Name of the course.
- **CourseDescription**: A brief description of what the course is about.
- **CoursePrequiste**: A statement describing the prequisite for the course.
- **AdminID** (Foreign Key): ID of the instructor teaching the course.

#3. Enrollments Table
- **EnrollmentID** (Primary Key): Unique identifier for each enrollment.
- **UserID** (Foreign Key): ID of the user enrolled in the course.
- **CourseID** (Foreign Key): ID of the course the user is enrolled in.
- **EnrollmentDate**: Date when the user enrolled in the course.
- **Pending**: Boolean: True if userID meets the courseID course prerequisites.

#4. Assignments Table
- **AssignmentID** (Primary Key): Unique identifier for each assignment.
- **CourseID** (Foreign Key): ID of the course the assignment is part of.
- **Title**: Title of the assignment.
- **Description**: A brief description of the assignment.
- **DueDate**: When the assignment is due.

#5. Submissions Table
- **SubmissionID** (Primary Key): Unique identifier for each submission.
- **AssignmentID** (Foreign Key): ID of the assignment being submitted to.
- **UserID** (Foreign Key): ID of the user who made the submission.
- **SubmissionDate**: Date when the assignment was submitted.
- **Grade**: Grade awarded for the submission.

#6. Discussions Table
- **DiscussionID** (Primary Key): Unique identifier for each discussion thread.
- **CourseID** (Foreign Key): ID of the course the discussion is related to.
- **UserID** (Foreign Key): ID of the user who started the discussion.
- **Title**: Title of the discussion thread.
- **InitialPost**: The initial post of the discussion thread.

#7. DiscussionResponses Table
- **ResponseID** (Primary Key): Unique identifier for each response.
- **DiscussionID** (Foreign Key): ID of the discussion thread being responded to.
- **UserID** (Foreign Key): ID of the user making the response.
- **ResponseText**: The text of the response.
- **ResponseDate**: Date and time the response was made.

Considerations:

Assigning Instructors to Courses: Since courses are created by admins, you'll need a mechanism to assign instructors to courses. This could be a new table or an adjustment to existing structures.
Prerequisite Checking Logic: The CoursePrerequisite format and the logic to evaluate these prerequisites need to be designed thoughtfully. It might involve application logic outside the database to interpret these prerequisites and update the Pending status accordingly. 



Example of How 5 users would interact with the database:

To illustrate how the five users would interact with the updated database schema, let's first define our users, then a course, and demonstrate the interactions across the tables.

#Step 1: Define Users

#Users Table

| UserID | Username       | Password | FirstName | LastName | Email                       | Role          |
|--------|----------------|----------|-----------|----------|-----------------------------|---------------|
| 1      | admin_mary     | ******** | Mary      | Johnson  | mary.johnson@example.com    | Administrator |
| 2      | teacher_anna   | ******** | Anna      | Bell     | anna.bell@example.com       | Instructor    |
| 3      | teacher_john   | ******** | John      | Doe      | john.doe@example.com        | Instructor    |
| 4      | student_alex   | ******** | Alex      | Young    | alex.young@example.com      | Student       |
| 5      | student_emma   | ******** | Emma      | Stone    | emma.stone@example.com      | Student       |

#Step 2: Create Courses

Admin Mary creates two courses, assigning each course to a teacher.

#Courses Table

| CourseID | CourseName                  | CourseDescription            | CoursePrequiste   | AdminID |
|----------|-----------------------------|------------------------------|-------------------|---------|
| 1        | Intro to Programming        | Basics of programming        | None              | 1       |
| 2        | Advanced Mathematics        | In-depth study of mathematics| Intro to Programming | 1     |

#Step 3: Teachers and Courses Interaction

Since Mary, the Admin, assigns teachers to courses after creation, let's assume she assigns Anna to "Intro to Programming" and John to "Advanced Mathematics".

#Step 4: Student Enrollments

Both students attempt to enroll in both courses. Given "Advanced Mathematics" has a prerequisite, their enrollment in this course will be pending until they complete "Intro to Programming".

#Enrollments Table

| EnrollmentID | UserID | CourseID | EnrollmentDate | Pending  |
|--------------|--------|----------|----------------|----------|
| 1            | 4      | 1        | 2024-03-01     | False    |
| 2            | 4      | 2        | 2024-03-02     | True     |
| 3            | 5      | 1        | 2024-03-01     | False    |
| 4            | 5      | 2        | 2024-03-02     | True     |

#Step 5: Assignments and Submissions

Anna creates an assignment for "Intro to Programming".

#Assignments Table

| AssignmentID | CourseID | Title           | Description             | DueDate   |
|--------------|----------|-----------------|-------------------------|-----------|
| 1            | 1        | Hello World     | Create a simple program | 2024-03-15|

Alex and Emma submit their assignments.

#Submissions Table

| SubmissionID | AssignmentID | UserID | SubmissionDate | Grade |
|--------------|--------------|--------|----------------|-------|
| 1            | 1            | 4      | 2024-03-14     | 90    |
| 2            | 1            | 5      | 2024-03-14     | 95    |

#Step 6: Discussions and Responses

John initiates a discussion in "Advanced Mathematics".

#Discussions Table

| DiscussionID | CourseID | UserID | Title          | InitialPost                    |
|--------------|----------|--------|----------------|--------------------------------|
| 1            | 2        | 3      | Math Concepts  | "Discuss the latest math concepts." |

Alex and Emma participate in the discussion.

#DiscussionResponses Table

| ResponseID | DiscussionID | UserID | ResponseText                     | ResponseDate |
|------------|--------------|--------|----------------------------------|--------------|
| 1          | 1            | 4      | "I'm curious about algebraic geometry." | 2024-03-05 |
| 2          | 1            | 5      | "What about non-Euclidean geometry?" | 2024-03-06 |


Illustration and Explanation:

1. **Admin Role**: Mary creates courses and assigns instructors. This role is critical for setting up the structure of the learning platform.
2. **Instructor Role**: Anna and John are responsible for their assigned courses, including creating assignments and initiating discussions. They guide the learning process and evaluate student submissions.
3. **Student Role**: Alex and Emma enroll in courses, submit assignments, and engage in course discussions. Their enrollment in "Advanced Mathematics" is pending until they meet the prerequisite, illustrating the logic behind course prerequisites and enrollment status.


HERE IS THE MODIFIED SQL SCHEMA FOR THE DATABASE:

-- Dropping existing view if it exists to avoid conflicts during recreation
DROP VIEW IF EXISTS StudentInformationAndGrades;

-- 1. Users Table
CREATE TABLE IF NOT EXISTS Users (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    Username VARCHAR(255) NOT NULL UNIQUE,
    Password VARCHAR(255) NOT NULL, -- Assume passwords are securely hashed
    FirstName VARCHAR(255) NOT NULL,
    LastName VARCHAR(255),
    Email VARCHAR(255) NOT NULL UNIQUE,
    Role ENUM('Student', 'Instructor', 'Administrator') NOT NULL
);

-- 2. Courses Table
CREATE TABLE IF NOT EXISTS Courses (
    CourseID INT AUTO_INCREMENT PRIMARY KEY,
    CourseName VARCHAR(255) NOT NULL,
    CourseDescription TEXT,
    CoursePrerequisite TEXT,
    InstructorID INT,
    FOREIGN KEY (InstructorID) REFERENCES Users(UserID)
);

-- 3. Enrollments Table
CREATE TABLE IF NOT EXISTS Enrollments (
    EnrollmentID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT,
    CourseID INT,
    EnrollmentDate DATE NOT NULL,
    Pending BOOLEAN NOT NULL DEFAULT TRUE,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

-- 4. Assignments Table
CREATE TABLE IF NOT EXISTS Assignments (
    AssignmentID INT AUTO_INCREMENT PRIMARY KEY,
    CourseID INT,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    DueDate DATE NOT NULL,
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

-- 5. Submissions Table
CREATE TABLE IF NOT EXISTS Submissions (
    SubmissionID INT AUTO_INCREMENT PRIMARY KEY,
    AssignmentID INT,
    UserID INT,
    SubmissionDate DATE NOT NULL,
    Grade INT,
    FOREIGN KEY (AssignmentID) REFERENCES Assignments(AssignmentID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- 6. Discussions Table
CREATE TABLE IF NOT EXISTS Discussions (
    DiscussionID INT AUTO_INCREMENT PRIMARY KEY,
    CourseID INT,
    UserID INT,
    Title VARCHAR(255) NOT NULL,
    InitialPost TEXT NOT NULL,
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- 7. DiscussionResponses Table
CREATE TABLE IF NOT EXISTS DiscussionResponses (
    ResponseID INT AUTO_INCREMENT PRIMARY KEY,
    DiscussionID INT,
    UserID INT,
    ResponseText TEXT NOT NULL,
    ResponseDate DATETIME NOT NULL,
    FOREIGN KEY (DiscussionID) REFERENCES Discussions(DiscussionID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- Creating a view to display student information along with their final course grades
CREATE VIEW StudentInformationAndGrades AS
SELECT
    u.UserID,
    u.Username,
    u.FirstName,
    u.LastName,
    u.Email,
    u.Role,
    c.CourseID,
    c.CourseName,
    AVG(s.Grade) AS FinalCourseGrade
FROM
    Users u
JOIN Enrollments e ON u.UserID = e.UserID
JOIN Courses c ON e.CourseID = c.CourseID
LEFT JOIN Submissions s ON u.UserID = s.UserID AND c.CourseID = s.CourseID
GROUP BY
    u.UserID, c.CourseID
ORDER BY
    u.LastName, u.FirstName, c.CourseName;


